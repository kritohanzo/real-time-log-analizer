# Generated by Django 5.0.2 on 2024-05-12 07:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("logs", "0010_logfile_one_time_scan"),
    ]

    operations = [
        migrations.CreateModel(
            name="NotificationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, verbose_name="Название")),
            ],
            options={
                "verbose_name": "Тип оповещения",
                "verbose_name_plural": "Типы оповещений",
                "ordering": ("id",),
            },
        ),
        migrations.CreateModel(
            name="SearchPatternNotificationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notification_type_search_patterns",
                        to="logs.notificationtype",
                        verbose_name="Тип оповещения поискового паттерна",
                    ),
                ),
                (
                    "search_pattern",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_pattern_notification_types",
                        to="logs.searchpattern",
                        verbose_name="Поисковый паттерн типа оповещения",
                    ),
                ),
            ],
            options={
                "verbose_name": "Связь поискового паттерна и типа оповещения",
                "verbose_name_plural": "Связи поисковых паттернов и типов оповещений",
                "ordering": ("id",),
            },
        ),
        migrations.AddField(
            model_name="searchpattern",
            name="notification_types",
            field=models.ManyToManyField(
                related_name="search_patterns",
                through="logs.SearchPatternNotificationType",
                to="logs.notificationtype",
                verbose_name="Типы оповещений",
            ),
        ),
    ]
